// Executable File for .exe file

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MENU_lIST_COUNT 5
#define FILE_NAME "framework16.dat"
#define FILE_FIELDS "hospitalFields.cfg"
#define MENU "hospitalMenu.cfg"
#define FIELD_NAME_LENGTH 100
#define FIELD_VALUE_LENGTH 20
#define FIELD_COUNT 100

void creationNewEntry();
void displayAllEntries();
void updateEntry();
void removeEntry();
int count;
char fieldNames[100][FIELD_NAME_LENGTH];
int countOfFields;

void main()
{
	int option;

	system("cls");
	do
	{
		FILE *fpMenu;
		FILE *fpFields;
		int iterator = 0;
		fpFields = fopen(FILE_FIELDS, "r");
		while(fgets(fieldNames[iterator], FIELD_COUNT, fpFields))
		{
			fieldNames[iterator][strlen(fieldNames[iterator]) - 1] = '\0';
			iterator++;
		}
		countOfFields = iterator;
		char menu[FIELD_NAME_LENGTH];
		fpMenu = fopen(MENU, "r");
		while(fgets(menu, FIELD_NAME_LENGTH, fpMenu))
		{
			printf("%s \n", menu);
		}
		printf("\nPlease enter your option: ");
		scanf("%d", &option);
		switch(option)
		{
			case 1: creationNewEntry(); 
			break;
			case 2: displayAllEntries();
			break;
			case 3: updateEntry();
			break;
			case 4: removeEntry();
			break;
			case 5: exit(0);
			break;
			default : printf("Invalid option.");
			break;
		}
	}while(option != MENU_lIST_COUNT);

}

 void creationNewEntry()
 {
 	char fieldValue[FIELD_VALUE_LENGTH], status;
 	FILE *fpData;
 	fpData = fopen(FILE_NAME, "a");
 	int iterator =0;
 	count = 0;
 	if(fpData == NULL)
 	{
 		printf("File creation failed.");
 		return;
 	}
 	else
 	{
 		while(iterator < countOfFields)
 		{
 			printf("Enter %s: ",fieldNames[iterator]);
 			scanf("%s", fieldValue);
 			fwrite(fieldValue, sizeof(fieldValue), 1, fpData);
 			iterator++;
 		}
 		
 	}
	fclose(fpData);
 }

 void displayAllEntries()
 {
 	char fieldValue[FIELD_VALUE_LENGTH], tempFieldName[FIELD_NAME_LENGTH];
	FILE *fpData;
	int iterator = 0;
 	fpData = fopen(FILE_NAME, "r");	
 	if(fpData == NULL)
 	{
 		printf("File is empty.");
 		return;
 	}
 	else
 	{

		iterator = 0;
 		while(fread(fieldValue, sizeof(fieldValue), 1, fpData))
 		{ 
 			printf("%s: ", fieldNames[iterator]);
 			printf("%s\n", fieldValue);
 			iterator++;
 			if(iterator == countOfFields)
 			{
 				iterator = 0;
 				printf("\n^^^^^^^^^^^^^^^^^^^^^^^^\n");
 			}
 		}
 	}
 	fclose(fpData);
 }

void updateEntry()
{
	char fieldValue[FIELD_VALUE_LENGTH], checkValue[FIELD_VALUE_LENGTH], tempfieldValue[FIELD_VALUE_LENGTH];
	FILE *fpData;
	fpData = fopen(FILE_NAME, "r+");
	printf("Enter %s: ", fieldNames[0]);
	scanf("%s", checkValue);
	while(fread(fieldValue, sizeof(fieldValue), 1, fpData))
	{

		printf("fieldvalue-%s\n checkvalue-%s\n", fieldValue, checkValue);
		if(strcmp(fieldValue, checkValue) == 0)
		{
			fseek(fpData, 40, SEEK_CUR);
			fread(fieldValue, sizeof(fieldValue), 1, fpData);
			printf("\nEnter new %s : ", fieldNames[2]);
			scanf("%s", tempfieldValue);
			fseek(fpData, -40, SEEK_CUR);
			fwrite(tempfieldValue, sizeof(tempfieldValue), 1, fpData);
			printf("\nInformation is successfully updated.\n");
			return;

		}
	}
	fclose(fpData);
	return;
}

void removeEntry()
{
	char fieldValue[FIELD_VALUE_LENGTH], id[FIELD_NAME_LENGTH];
	char status;
	FILE *fpData;
	fpData = fopen(FILE_NAME, "r+");
	printf("Enter %s: ", fieldNames[0]);
	scanf("%s", id);
	while(fread(fieldValue, sizeof(fieldValue), 1, fpData))
	{
		if(strcmp(fieldValue, id) == 0)
		{
			fseek(fpData, 41, SEEK_CUR);
			fread(fieldValue, sizeof(fieldValue), 1, fpData);
			// printf("%s", fieldValue);
			status = 'D';
			fseek(fpData, -1, SEEK_CUR);
			printf("%s", fieldValue);
			fwrite(&status, sizeof(status), 1, fpData);
			printf("%s is deleted.\n", fieldNames[0]);
			break;
		}
	}
	fclose(fpData);
}
