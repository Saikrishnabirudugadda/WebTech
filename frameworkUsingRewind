// Executable File for .exe file

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MENU_lIST_COUNT 5
#define FILE_NAME "framework21.dat"
#define FILE_FIELDS "travelFields.cfg"
#define MENU "travelMenu.cfg"
#define FIELD_NAME_LENGTH 100
#define FIELD_VALUE_LENGTH 20

void creationNewEntry();
void displayAllEntries();
void updateEntry();
void removeEntry();
FILE *fpFields;
int count;

void main()
{
	int option;
	system("cls");
	do
	{
		FILE *fpMenu;
		fpFields = fopen(FILE_FIELDS, "r");
		char menu[FIELD_NAME_LENGTH];
		fpMenu = fopen(MENU, "r");
		while(fgets(menu, FIELD_NAME_LENGTH, fpMenu))
		{
			printf("\n%s", menu);
		}
		printf("\n\nPlease enter your option: ");
		scanf("%d", &option);
		switch(option)
		{
			case 1: creationNewEntry(); 
			break;
			case 2: displayAllEntries();
			break;
			case 3: updateEntry();
			break;
			case 4: removeEntry();
			break;
			case 5: exit(0);
			break;
			default : printf("Invalid option.");
			break;
		}
	}while(option != MENU_lIST_COUNT);

}

 void creationNewEntry()
 {
 	char fieldName[FIELD_NAME_LENGTH], fieldValue[FIELD_VALUE_LENGTH], status;
 	FILE *fpData;
 	fpData = fopen(FILE_NAME, "a");
 	int iterator =0;
 	count = 0;
 	while(fgets(fieldName, 100, fpFields) != NULL)
 		{
 			count = count + 1;
 		}
 	if(fpData == NULL)
 	{
 		printf("File creation failed.");
 		return;
 	}
 	else
 	{
 		rewind(fpFields);
 		while(iterator < count)
 		{
 			fgets(fieldName, 100, fpFields);
 			fieldName[strlen(fieldName) -1] = '\0';
 			printf("Enter %s: ",fieldName);
 			scanf("%s", fieldValue);
 			fwrite(fieldValue, sizeof(fieldValue), 1, fpData);
 			iterator++;
 		}
 		
 	}
	fclose(fpData);
 }

 void displayAllEntries()
 {
 	char fieldName[FIELD_NAME_LENGTH], fieldValue[FIELD_VALUE_LENGTH], tempFieldName[FIELD_NAME_LENGTH];
	FILE *fpData;

 	fpData = fopen(FILE_NAME, "r");
 	int seekfield = 1;
	

 	if(fpData == NULL)
 	{
 		printf("File is empty.");
 		return;
 	}
 	else
 	{
 		rewind(fpFields);
 		while(fread(fieldValue, sizeof(fieldValue), 1, fpData))
 		{
 			fgets(fieldName, 100, fpFields);
 			fieldName[strlen(fieldName) - 1] = '\0';
 			printf("%s: ", fieldName);
 			printf("%s\n", fieldValue);
 			if(feof(fpFields))
 			{
 				fseek(fpFields, 0, SEEK_SET);
 				printf("\n-----------------------\n");
 			}
 		}
 	}
 	fclose(fpData);
 }

void updateEntry()
{
	char fieldName[FIELD_NAME_LENGTH], fieldValue[FIELD_VALUE_LENGTH], checkValue[FIELD_VALUE_LENGTH];
	FILE *fpData;
	char tempFieldValue[FIELD_VALUE_LENGTH];
	fpData = fopen(FILE_NAME,"r+");
	rewind(fpFields);
	fgets(fieldName, 100, fpFields);
	fieldName[strlen(fieldName) - 1] = '\0';
	printf("\nEnter %s: ", fieldName);
	scanf("%s", checkValue);
	if(fpData == NULL)
	{
		printf(" File is empty");
		return;
	}
	rewind(fpFields);
	while(fread(fieldValue, sizeof(fieldValue), 1, fpData))
	{
		printf("fieldValue--%s  checkValue--%s\n", fieldValue, checkValue);
		if(strcmp(fieldValue, checkValue) == 0)
		{
			fseek(fpData, 40, SEEK_CUR);
			fgets(fieldName, 100, fpFields);
			fieldName[strlen(fieldName) - 1] = '\0';
			printf("\nEnter %s", fieldName);
			scanf("%s", tempFieldValue);
			fseek(fpData, -40, SEEK_CUR);
			fwrite(tempFieldValue, sizeof(tempFieldValue), 1, fpData);
			printf("Information updated successfully");
			return;

		}

	}
}

void removeEntry()
{
	char fieldName[FIELD_NAME_LENGTH], fieldValue[FIELD_VALUE_LENGTH], id[FIELD_NAME_LENGTH];
	char status;
	FILE *fpData;
	fpData = fopen(FILE_NAME, "r+");
	rewind(fpFields);
	fgets(fieldName, 100, fpFields);
	fieldName[strlen(fieldName) - 1] = '\0';
	printf("Enter %s: ", fieldName);
	scanf("%s", id);
	rewind(fpFields);
	while(fread(fieldValue, sizeof(fieldValue), 1, fpData))
	{
		if(strcmp(fieldValue, id) == 0)
		{
			fread(fieldValue, sizeof(fieldValue), 1, fpData);
			fseek(fpData, 40, SEEK_CUR);
			status = 'D';
			fseek(fpData, -1, SEEK_CUR);
			fwrite(&status, sizeof(status), 1, fpData);
			rewind(fpFields);
			fgets(fieldName, 100, fpFields);
			printf("\n%s is deleted.\n", fieldName);
			break;
		}
		
	}
	fclose(fpData);
}
